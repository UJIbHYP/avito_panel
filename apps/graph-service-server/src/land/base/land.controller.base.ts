/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LandService } from "../land.service";
import { LandCreateInput } from "./LandCreateInput";
import { Land } from "./Land";
import { LandFindManyArgs } from "./LandFindManyArgs";
import { LandWhereUniqueInput } from "./LandWhereUniqueInput";
import { LandUpdateInput } from "./LandUpdateInput";

export class LandControllerBase {
  constructor(protected readonly service: LandService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Land })
  @swagger.ApiBody({
    type: LandCreateInput,
  })
  async createLand(@common.Body() data: LandCreateInput): Promise<Land> {
    return await this.service.createLand({
      data: data,
      select: {
        area: true,
        createdAt: true,
        id: true,
        landArea: true,
        landCreatedAt: true,
        landLocation: true,
        landPriceM: true,
        landPriceTotal: true,
        landUrl: true,
        location: true,
        priceM: true,
        priceTotal: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Land] })
  @ApiNestedQuery(LandFindManyArgs)
  async lands(@common.Req() request: Request): Promise<Land[]> {
    const args = plainToClass(LandFindManyArgs, request.query);
    return this.service.lands({
      ...args,
      select: {
        area: true,
        createdAt: true,
        id: true,
        landArea: true,
        landCreatedAt: true,
        landLocation: true,
        landPriceM: true,
        landPriceTotal: true,
        landUrl: true,
        location: true,
        priceM: true,
        priceTotal: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Land })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async land(
    @common.Param() params: LandWhereUniqueInput
  ): Promise<Land | null> {
    const result = await this.service.land({
      where: params,
      select: {
        area: true,
        createdAt: true,
        id: true,
        landArea: true,
        landCreatedAt: true,
        landLocation: true,
        landPriceM: true,
        landPriceTotal: true,
        landUrl: true,
        location: true,
        priceM: true,
        priceTotal: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Land })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: LandUpdateInput,
  })
  async updateLand(
    @common.Param() params: LandWhereUniqueInput,
    @common.Body() data: LandUpdateInput
  ): Promise<Land | null> {
    try {
      return await this.service.updateLand({
        where: params,
        data: data,
        select: {
          area: true,
          createdAt: true,
          id: true,
          landArea: true,
          landCreatedAt: true,
          landLocation: true,
          landPriceM: true,
          landPriceTotal: true,
          landUrl: true,
          location: true,
          priceM: true,
          priceTotal: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Land })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLand(
    @common.Param() params: LandWhereUniqueInput
  ): Promise<Land | null> {
    try {
      return await this.service.deleteLand({
        where: params,
        select: {
          area: true,
          createdAt: true,
          id: true,
          landArea: true,
          landCreatedAt: true,
          landLocation: true,
          landPriceM: true,
          landPriceTotal: true,
          landUrl: true,
          location: true,
          priceM: true,
          priceTotal: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
