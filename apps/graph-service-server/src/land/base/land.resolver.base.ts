/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Land } from "./Land";
import { LandCountArgs } from "./LandCountArgs";
import { LandFindManyArgs } from "./LandFindManyArgs";
import { LandFindUniqueArgs } from "./LandFindUniqueArgs";
import { CreateLandArgs } from "./CreateLandArgs";
import { UpdateLandArgs } from "./UpdateLandArgs";
import { DeleteLandArgs } from "./DeleteLandArgs";
import { LandService } from "../land.service";
@graphql.Resolver(() => Land)
export class LandResolverBase {
  constructor(protected readonly service: LandService) {}

  async _landsMeta(
    @graphql.Args() args: LandCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Land])
  async lands(@graphql.Args() args: LandFindManyArgs): Promise<Land[]> {
    return this.service.lands(args);
  }

  @graphql.Query(() => Land, { nullable: true })
  async land(@graphql.Args() args: LandFindUniqueArgs): Promise<Land | null> {
    const result = await this.service.land(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Land)
  async createLand(@graphql.Args() args: CreateLandArgs): Promise<Land> {
    return await this.service.createLand({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Land)
  async updateLand(@graphql.Args() args: UpdateLandArgs): Promise<Land | null> {
    try {
      return await this.service.updateLand({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Land)
  async deleteLand(@graphql.Args() args: DeleteLandArgs): Promise<Land | null> {
    try {
      return await this.service.deleteLand(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
